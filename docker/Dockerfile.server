# Multi-stage build for VCS Server
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies (cached layer)
RUN go mod download

# Copy source code
COPY . .

# Build the server binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o vcs-server \
    ./cmd/vcs-server

# Production stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 1001 -S vcs && \
    adduser -u 1001 -S vcs -G vcs

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/vcs-server .

# Create necessary directories
RUN mkdir -p /app/storage /app/logs && \
    chown -R vcs:vcs /app

# Switch to non-root user
USER vcs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set default environment variables
ENV ENVIRONMENT=production
ENV PORT=8080
ENV STORAGE_PATH=/app/storage

# Run the server
CMD ["./vcs-server"]